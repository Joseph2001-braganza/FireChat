import React, { useState, useEffect } from 'react';
import firebase from 'firebase/compat/app';
import 'firebase/compat/auth';
import 'firebase/compat/database';
import './App.css';

// Initialize Firebase
const firebaseConfig = {
  // Your Firebase configuration
  // ...
  apiKey: "AIzaSyC1o8w_42AI-QXI4mGI6dxFMVcgamZeIGo",
  authDomain: "chatzzapp-a24dd.firebaseapp.com",
  databaseURL: "https://chatzzapp-a24dd-default-rtdb.asia-southeast1.firebasedatabase.app",
  projectId: "chatzzapp-a24dd",
  storageBucket: "chatzzapp-a24dd.appspot.com",
  messagingSenderId: "668671561630",
  appId: "1:668671561630:web:78e761720d83e3e9fdd08f",
  measurementId: "G-WGP0P94J2V"
};

firebase.initializeApp(firebaseConfig);

const App = () => {
  const [user, setUser] = useState(null);
  const [chatRooms, setChatRooms] = useState([]);
  const [currentRoom, setCurrentRoom] = useState(null);
  const [messages, setMessages] = useState([]);
  const [newMessage, setNewMessage] = useState('');
  const [searchQuery, setSearchQuery] = useState('');
  const [searchResults, setSearchResults] = useState([]);
  const [users, setUsers] = useState([]);
  const [selectedUser, setSelectedUser] = useState(null);
  const [searchMode, setSearchMode] = useState('group');
  const [currentPrivateChat, setCurrentPrivateChat] = useState(null);

  let groupSearchResults = [];
  let userSearchResults = [];

if (searchMode === 'group') {
  groupSearchResults = chatRooms;
} else if (searchMode === 'user') {
  userSearchResults = Object.values(users);
}

  // Authenticate user with Google
  const signInWithGoogle = async () => {
    const provider = new firebase.auth.GoogleAuthProvider();
    try {
      const result = await firebase.auth().signInWithPopup(provider);
      const { uid, displayName } = result.user;

      // Check if the user already exists in the database
      const userRef = firebase.database().ref(`users/${uid}`);
      userRef.once('value', (snapshot) => {
        if (!snapshot.exists()) {
          // Create a new user in the database
          userRef.set({
            displayName: displayName,
          });
        }
      });

      setUser(result.user);
    } catch (error) {
      console.error(error);
    }
  };

  // Search groups and people
  const searchGroupsAndPeople = () => {
    const filteredRooms = chatRooms.filter(([id, room]) =>
      room.name.toLowerCase().includes(searchQuery.toLowerCase())
    );
    const filteredUsers = Object.values(users).filter((user) =>
      user.displayName.toLowerCase().includes(searchQuery.toLowerCase())
    );
    setSearchResults([...filteredRooms, ...filteredUsers]);
  };

  // Functions to handle which search mode to use
  const switchToGroupSearch = () => {
    setSearchMode('group');
    setSearchQuery('');
  };

  const switchToUserSearch = () => {
    setSearchMode('user');
    setSearchQuery('');
  };

  // Start a private chat with another user
  const startPrivateChat = (user) => {
    setSelectedUser(user);
    setCurrentPrivateChat(user.uid);
  };

  // Log out user
  const signOut = async () => {
    try {
      await firebase.auth().signOut();
      setUser(null);
      setCurrentRoom(null);
      setMessages([]);
    } catch (error) {
      console.error(error);
    }
  };

  // Create a new chat room
  const createChatRoom = () => {
    const roomName = prompt('Enter the name of the new chat room:');
    if (roomName) {
      const newRoom = firebase.database().ref('chatRooms').push();
      newRoom.set({
        name: roomName,
        createdBy: user.uid,
        participants: {
          [user.uid]: true,
        },
      });

      // Update the chatRooms state with the new room
      setChatRooms([...chatRooms, [newRoom.key, { name: roomName, createdBy: user.uid }]]);
    }
  };

  // Join a chat room
  const joinChatRoom = (roomId) => {
    setCurrentRoom(roomId);
    setMessages([]);

    // Retrieve message history for the chat room
    firebase
      .database()
      .ref(`chatRooms/${roomId}/messages`)
      .on('value', (snapshot) => {
        const snapshotValue = snapshot.val();
        const messageList = snapshotValue ? Object.values(snapshotValue) : [];
        setMessages(messageList);
      });
  };

  // Leave the current chat room
  const leaveChatRoom = () => {
    // Remove the user from the chat room participants
    firebase.database().ref(`chatRooms/${currentRoom}/participants/${user.uid}`).remove();
    setCurrentRoom(null);
    setMessages([]);
  };

  // Delete a chat room
  const deleteChatRoom = (roomId) => {
    // Check if the user is the owner of the chat room
    const room = chatRooms.find(([id]) => id === roomId);
    if (room[1].createdBy === user.uid) {
      // Remove the chat room from the database
      firebase.database().ref(`chatRooms/${roomId}`).remove();
    }
  };

  // Send a new message
  const sendMessage = () => {
    if (newMessage && currentRoom) {
      const newMessageRef = firebase.database().ref(`chatRooms/${currentRoom}/messages`).push();
      newMessageRef.set({
        content: newMessage,
        sender: user.displayName,
        timestamp: firebase.database.ServerValue.TIMESTAMP,
      });
      setNewMessage('');
    }
  };

  useEffect(() => {
    // Retrieve chat rooms
    firebase.database().ref('chatRooms').on('value', (snapshot) => {
      const snapshotValue = snapshot.val();
      const roomList = snapshotValue ? Object.entries(snapshotValue) : [];
      setChatRooms(roomList);
      setSearchResults([...roomList, ...Object.values(users)]);
    });

    // Retrieve users
    firebase.database().ref('users').on('value', (snapshot) => {
      const snapshotValue = snapshot.val();
      const userList = snapshotValue ? Object.values(snapshotValue) : [];
      setUsers(snapshotValue);
      setSearchResults([...chatRooms, ...userList]);
    });

    // Clean up listeners
    return () => {
      firebase.database().ref().off();
      firebase.auth().signOut();
    };
  }, []);

  


  return (
    <div className="app">
      {user ? (
        <div className="chat-app">
          <h1>Welcome, {user.displayName}</h1>
          <button className="sign-out-btn" onClick={signOut}>
            Sign Out
          </button>

          {currentRoom ? (
            <div className="chat-room">
              <h2>Chat Room: {chatRooms.find(([id]) => id === currentRoom)[1].name}</h2>
              <button className="leave-room-btn" onClick={leaveChatRoom}>
                Leave Room
              </button>

              <ul className="message-list">
                {messages.map(({ content, sender }, index) => (
                  <li
                    key={index}
                    className={`message ${sender === user.uid ? 'sent' : 'received'}`}
                  >
                    <strong>{sender === user.displayName ? 'You' : sender}</strong>: {content}
                  </li>
                ))}
              </ul>

              <div className="message-input">
                <input
                  type="text"
                  placeholder="Type your message..."
                  value={newMessage}
                  onChange={(e) => setNewMessage(e.target.value)}
                />
                <button className="send-message-btn" onClick={sendMessage}>
                  Send
                </button>
              </div>
            </div>
          ) : (
            <div className="chat-rooms">
              <h2>Chat Rooms</h2>
              <button className="create-room-btn" onClick={createChatRoom}>
                Create New Room
              </button>

              <div className="search-bar">
                <button
                  className={`search-btn ${searchMode === 'group' ? 'active' : ''}`}
                  onClick={switchToGroupSearch}
                >
                  Group Search
                </button>
                <button
                  className={`search-btn ${searchMode === 'user' ? 'active' : ''}`}
                  onClick={switchToUserSearch}
                >
                  User Search
                </button>
                <input
                  type="text"
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                  placeholder={`Search ${searchMode === 'group' ? 'group' : 'user'}`}
                  className="search-input"
                />
              </div>

              <ul className="search-results">
                {searchMode === 'group' &&
                  groupSearchResults.map(([id, room]) => (
                    <li key={id}>
                      {room.name} <button onClick={() => joinChatRoom(id)}>Join</button>
                    </li>
                  ))}
                {searchMode === 'user' &&
                  userSearchResults.map((user) => (
                    <li key={user.uid}>
                      {user.displayName}
                      <button onClick={() => startPrivateChat(user)}>Message</button>
                    </li>
                  ))}
              </ul>
            </div>
          )}
          {currentPrivateChat && (
            <div className="private-chat">
            <h2>Private Chat: {selectedUser.displayName}</h2>
            <button className="leave-private-chat-btn" onClick={() => setCurrentPrivateChat(null)}>
              Leave Private Chat
            </button>
          
            <ul className="private-chat-messages">
              {privateChatMessages.map(({ content, sender }) => (
                <li
                  className={`private-chat-message ${sender === user.displayName ? 'sent' : 'received'}`}
                >
                  <span className="message-content">{content}</span>
                </li>
              ))}
            </ul>
          
            <div className="private-chat-input">
              <input
                type="text"
                placeholder="Type your message..."
                value={newPrivateMessage}
                onChange={(e) => setNewPrivateMessage(e.target.value)}
              />
              <button className="send-private-message-btn" onClick={sendPrivateMessage}>
                Send
              </button>
            </div>
          </div>
          
          )}
        </div>
      ) : (
        <div className="login-screen">
          <h1>Chat Application</h1>
          <button className="sign-in-btn" onClick={signInWithGoogle}>
            Sign In with Google
          </button>
        </div>
      )}
    </div>
  );
};

export default App;
